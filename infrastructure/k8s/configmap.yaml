apiVersion: v1
kind: ConfigMap
metadata:
  name: cyberguard-ai-config
  namespace: cyberguard-ai
  labels:
    app.kubernetes.io/name: cyberguard-ai
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: cybersecurity-platform
data:
  # Application Configuration
  APP_NAME: "CyberGuard AI"
  APP_VERSION: "2.0.0"
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  
  # Flask Configuration
  FLASK_APP: "app.py"
  FLASK_ENV: "production"
  SECRET_KEY_FILE: "/secrets/flask-secret"
  
  # Database Configuration
  DB_HOST: "cyberguard-prod-postgres.cluster-xyz.us-west-2.rds.amazonaws.com"
  DB_PORT: "5432"
  DB_NAME: "threat_detector"
  DB_USER: "ctd_admin"
  DB_PASSWORD_FILE: "/secrets/db-password"
  
  # Redis Configuration
  REDIS_HOST: "cyberguard-prod-redis.cache.amazonaws.com"
  REDIS_PORT: "6379"
  REDIS_PASSWORD_FILE: "/secrets/redis-password"
  REDIS_SSL: "true"
  
  # Elasticsearch/OpenSearch Configuration
  OPENSEARCH_HOST: "cyberguard-prod-logs.us-west-2.es.amazonaws.com"
  OPENSEARCH_PORT: "443"
  OPENSEARCH_SCHEME: "https"
  OPENSEARCH_USERNAME: "admin"
  OPENSEARCH_PASSWORD_FILE: "/secrets/opensearch-password"
  
  # Kafka Configuration
  KAFKA_BOOTSTRAP_SERVERS: "b-1.cyberguard-prod-kafka.kafka.us-west-2.amazonaws.com:9092,b-2.cyberguard-prod-kafka.kafka.us-west-2.amazonaws.com:9092,b-3.cyberguard-prod-kafka.kafka.us-west-2.amazonaws.com:9092"
  KAFKA_SECURITY_PROTOCOL: "SSL"
  KAFKA_SSL_CHECK_HOSTNAME: "true"
  KAFKA_TOPIC_LOGS: "security-logs"
  KAFKA_TOPIC_THREATS: "threat-alerts"
  KAFKA_CONSUMER_GROUP: "cyberguard-consumers"
  
  # Security Configuration
  JWT_SECRET_FILE: "/secrets/jwt-secret"
  JWT_ACCESS_TOKEN_EXPIRES: "3600"
  JWT_REFRESH_TOKEN_EXPIRES: "86400"
  BCRYPT_LOG_ROUNDS: "12"
  
  # API Configuration
  API_PREFIX: "/api"
  API_VERSION: "v1"
  CORS_ORIGINS: "https://cyberguard.example.com"
  RATE_LIMIT_PER_MINUTE: "100"
  RATE_LIMIT_PER_HOUR: "1000"
  
  # Real-time Configuration
  WEBSOCKET_ENABLED: "true"
  SSE_ENABLED: "true"
  NOTIFICATION_CHANNELS: "websocket,sse,email"
  
  # Machine Learning Configuration
  MODEL_PATH: "/app/models"
  MODEL_UPDATE_INTERVAL: "3600"
  PREDICTION_THRESHOLD: "0.85"
  BATCH_SIZE: "32"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  HEALTH_CHECK_ENDPOINT: "/health"
  READINESS_CHECK_ENDPOINT: "/ready"
  
  # Backup Configuration
  BACKUP_ENABLED: "true"
  BACKUP_SCHEDULE: "0 2 * * *"
  BACKUP_RETENTION_DAYS: "30"
  
  # Feature Flags
  FEATURE_ADVANCED_ANALYTICS: "true"
  FEATURE_THREAT_HUNTING: "true"
  FEATURE_FORENSIC_CASES: "true"
  FEATURE_PREDICTIVE_ANALYTICS: "true"
  FEATURE_ML_INSIGHTS: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: cyberguard-ai
  labels:
    app.kubernetes.io/name: cyberguard-ai
    app.kubernetes.io/component: nginx-config
    app.kubernetes.io/part-of: cybersecurity-platform
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;

        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;

        upstream backend {
            server cyberguard-backend:5001 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;

            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;

            # API proxy
            location /api/ {
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                proxy_buffering off;
            }

            # WebSocket proxy
            location /ws/ {
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 86400s;
                proxy_send_timeout 86400s;
                proxy_read_timeout 86400s;
            }

            # Static files
            location / {
                try_files $uri $uri/ /index.html;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            # Error pages
            error_page 404 /404.html;
            error_page 500 502 503 504 /50x.html;
        }
    } 