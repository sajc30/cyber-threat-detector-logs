version: '3.8'

# Production overrides
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Production Backend with security hardening
  backend:
    build:
      target: production
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    read_only: true
    tmpfs:
      - /tmp:size=100M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Production Frontend with Nginx
  frontend:
    build:
      target: production
    read_only: true
    tmpfs:
      - /tmp:size=50M
      - /var/cache/nginx:size=50M
      - /var/run:size=10M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Production Nginx reverse proxy
  nginx:
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    read_only: true
    tmpfs:
      - /tmp:size=50M
      - /var/cache/nginx:size=100M
      - /var/run:size=10M

  # Production PostgreSQL with performance tuning
  postgres:
    environment:
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=100
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=4MB
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production Elasticsearch with performance tuning
  elasticsearch:
    environment:
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=90%
      - cluster.routing.allocation.disk.watermark.high=95%
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Production Redis with persistence and security
  redis:
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  # Production Kafka with performance tuning
  kafka:
    environment:
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_REPLICA_FETCHERS: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

# Production secrets (use Docker secrets in real deployment)
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  ssl_cert:
    external: true
  ssl_key:
    external: true

# Production networks with custom driver options
networks:
  ctd-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: ctd-prod
    ipam:
      config:
        - subnet: 172.21.0.0/16 