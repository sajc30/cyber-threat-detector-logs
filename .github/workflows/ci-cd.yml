name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Job 1: Lint and Test Python Backend
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_threat_detector
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        cd backend
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint with pylint
      run: |
        cd backend
        pylint --exit-zero --rcfile=../.pylintrc api/ log_parser/ model/ kafka_consumer/
      continue-on-error: true

    - name: Run Python unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_threat_detector
        ELASTICSEARCH_URL: http://localhost:9200
      run: |
        cd backend
        pytest tests/ --maxfail=5 --disable-warnings -v --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Job 2: Test Frontend (when implemented in Phase 4)
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/threat-detector-dashboard/package-lock.json

    - name: Install dependencies
      run: |
        if [ -f frontend/threat-detector-dashboard/package.json ]; then
          cd frontend/threat-detector-dashboard
          npm ci
        else
          echo "Frontend not yet implemented - skipping"
          exit 0
        fi

    - name: Lint frontend code
      run: |
        if [ -f frontend/threat-detector-dashboard/package.json ]; then
          cd frontend/threat-detector-dashboard
          npm run lint || echo "Linting failed but continuing"
        fi
      continue-on-error: true

    - name: Run frontend tests
      run: |
        if [ -f frontend/threat-detector-dashboard/package.json ]; then
          cd frontend/threat-detector-dashboard
          npm test -- --coverage --watchAll=false
        fi
      continue-on-error: true

    - name: Build frontend
      run: |
        if [ -f frontend/threat-detector-dashboard/package.json ]; then
          cd frontend/threat-detector-dashboard
          npm run build
        fi

  # Job 3: Build and Push Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/ctd
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ctd-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/ctd-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push consumer image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/kafka_consumer/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ctd-consumer:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/ctd-consumer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ctd-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/ctd-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true  # Allow failure if frontend not ready

  # Job 4: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Safety check for Python dependencies
      run: |
        pip install safety
        cd backend
        safety check -r requirements.txt || echo "Safety check found issues"
      continue-on-error: true

  # Job 5: Deploy to AWS (Phase 7)
  deploy-aws:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws/task-definition-backend.json
        container-name: ctd-backend
        image: ${{ secrets.DOCKERHUB_USERNAME }}/ctd-backend:${{ github.sha }}

    - name: Fill in the new image ID for consumer
      id: task-def-consumer
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        container-name: ctd-consumer
        image: ${{ secrets.DOCKERHUB_USERNAME }}/ctd-consumer:${{ github.sha }}

    - name: Fill in the new image ID for frontend
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-consumer.outputs.task-definition }}
        container-name: ctd-frontend
        image: ${{ secrets.DOCKERHUB_USERNAME }}/ctd-frontend:${{ github.sha }}
      continue-on-error: true

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ctd-service
        cluster: ctd-cluster
        wait-for-service-stability: true

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster ctd-cluster --service ctd-service --force-new-deployment

  # Job 6: Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-aws]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Deployment to AWS successful! Commit: ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Deployment failed! Commit: ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# Required secrets to be set in GitHub repository settings:
# - DOCKERHUB_USERNAME: Docker Hub username
# - DOCKERHUB_TOKEN: Docker Hub access token
# - AWS_ACCESS_KEY_ID: AWS access key
# - AWS_SECRET_ACCESS_KEY: AWS secret access key
# - AWS_REGION: AWS region (e.g., us-west-2)
# - SLACK_WEBHOOK_URL: Slack webhook URL for notifications (optional) 